#!/usr/bin/python3
# coding: utf-8
"""html2mutt - convert html mail to text compatible with mutt builtin pager"""
###############################################################################
# Copyright (C) 2018  Tiziano Zito <opossumnano@gmail.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
################################################################################
# This program is a stripped down and dumbed down version with some enhancements
# of html2text, a script to convert HTML to Markdown, originally written by
# Aaron Swartz, and currently mainteined by Alireza Savand. The original can be
# found at https://github.com/Alir3z4/html2text/
################################################################################
import re
import sys
import argparse
import os
import sys

import html.parser

import chardet

__version__ = '0.1'

SUP = ['⁰','¹','²','³','⁴','⁵','⁶','⁷','⁸','⁹']

# Marker to use for marking tables for padding post processing
TABLE_MARKER_FOR_PAD = "special_marker_for_table_padding"

# Values Google and others may use to indicate bold text
BOLD_TEXT_STYLE_VALUES = ('bold', '700', '800', '900')

# regexp to be compiled only once
RE_SPACE_GENERAL= re.compile(r'[ \r\n\t]+')
RE_TRAILING_SPACES = re.compile(r'[^\S\r\n]+$', re.MULTILINE)
RE_MULTIPLE_EMPTY_LINES = re.compile(r'\n\s*\n')
RE_MULTIPLE_QUOTEEMPTY_LINES = re.compile(r'(?P<QUOTE>\>+ *\n){2,}')
RE_MULTIPLE_BLANKS = re.compile('[ ]+(?P<FORMATTING>\N{INVISIBLE SEPARATOR}*)[ ]+')
RE_NON_PUNCT = re.compile(r'[^\s.!?]')

def hn(tag):
    if tag[0] == 'h' and len(tag) == 2:
        try:
            n = int(tag[1])
            if n in range(1, 10):  # pragma: no branch
                return n
        except ValueError:
            return 0


def dumb_property_dict(style):
    """
    :returns: A hash of css attributes
    """
    out = dict([(x.strip().lower(), y.strip().lower()) for x, y in
                [z.split(':', 1) for z in
                 style.split(';') if ':' in z
                 ]
                ]
               )

    return out


def dumb_css_parser(data):
    """
    :type data: str

    :returns: A hash of css selectors, each of which contains a hash of
    css attributes.
    :rtype: dict
    """
    # remove @import sentences
    data += ';'
    importIndex = data.find('@import')
    while importIndex != -1:
        data = data[0:importIndex] + data[data.find(';', importIndex) + 1:]
        importIndex = data.find('@import')

    # parse the css. reverted from dictionary comprehension in order to
    # support older pythons
    elements = [x.split('{') for x in data.split('}') if '{' in x.strip()]
    try:
        elements = dict([(a.strip(), dumb_property_dict(b))
                         for a, b in elements])
    except ValueError:  # pragma: no cover
        elements = {}  # not that important

    return elements


def google_text_emphasis(style):
    """
    :type style: dict

    :returns: A list of all emphasis modifiers of the element
    :rtype: list
    """
    emphasis = []
    if 'text-decoration' in style:
        emphasis.append(style['text-decoration'])
    if 'font-style' in style:
        emphasis.append(style['font-style'])
    if 'font-weight' in style:
        emphasis.append(style['font-weight'])

    return emphasis


def google_fixed_width_font(style):
    """
    Check if the css of the current element defines a fixed width font

    :type style: dict

    :rtype: bool
    """
    font_family = ''
    if 'font-family' in style:
        font_family = style['font-family']
    if 'courier new' == font_family or 'consolas' == font_family:
        return True

    return False


def list_numbering_start(attrs):
    """
    Extract numbering from list element attributes

    :type attrs: dict

    :rtype: int or None
    """
    if 'start' in attrs:
        try:
            return int(attrs['start']) - 1
        except ValueError:
            pass

    return 0


def reformat_table(lines, right_margin, columns):
    """
    Given the lines of a table
    padds the cells and returns the new lines
    """
    if not lines:
        return lines
    # find the maximum width of the columns
    max_width = [len(x.rstrip()) + right_margin for x in lines[0].split('│')]
    max_cols = len(max_width)
    for line in lines:
        cols = [x.rstrip() for x in line.split('│')]
        num_cols = len(cols)

        # don't drop any data if colspan attributes result in unequal lengths
        if num_cols < max_cols:
            cols += [''] * (max_cols - num_cols)
        elif max_cols < num_cols:
            max_width += [
                len(x) + right_margin for x in
                cols[-(num_cols - max_cols):]
            ]
            max_cols = num_cols

        max_width = [max(len(x) + right_margin, old_len)
                     for x, old_len in zip(cols, max_width)]

    # reformat
    new_lines = []
    for line in lines:
        cols = [x.rstrip() for x in line.split('│')]
        if set(line.strip()) == set('─│'):
            filler = '─'
            new_cols = [x.rstrip() + (filler * (M - len(x.rstrip())))
                        for x, M in zip(cols, max_width)]
        else:
            filler = ' '
            new_cols = [x.rstrip() + (filler * (M - len(x.rstrip())))
                        for x, M in zip(cols, max_width)]
        new_lines.append('│'+'│'.join(new_cols)+'│')
    # add horizontal rule above and below the table
    length = len(new_lines[0]) - 2
    new_lines.insert(0, '╭'+'─'*length+'╮')
    new_lines.append('╰'+'─'*length+'╯')
    # detect if we are overflowing the screen
    if columns and max(map(len, new_lines)) > (columns-1):
        # we are overflowing, undo the whole thing
        new_lines = []
        for line in lines:
            for char in '─│╰╯╭╮':
                new_line = line.replace(char,'').rstrip()
            new_lines.append(new_line)
    # compensate for invisible unicode chars
    padded_new_lines = []
    for line in new_lines:
        if len(line) > 2 and line[-1] == '│':
            inv = line.count('\N{INVISIBLE SEPARATOR}')
            padded_new_lines.append(line[:-1]+' '*inv+line[-1])
        else:
            padded_new_lines.append(line)
    return padded_new_lines


def pad_tables_in_text(text, right_margin=1, columns=None):
    """
    Provide padding for tables in the text
    """
    lines = text.split('\n')
    table_buffer, table_started = [], False
    new_lines = []
    for line in lines:
        # Toggle table started
        if (TABLE_MARKER_FOR_PAD in line):
            table_started = not table_started
            if not table_started:
                table = reformat_table(table_buffer, right_margin, columns)
                new_lines.extend(table)
                table_buffer = []
                new_lines.append('')
            continue
        # Process lines
        if table_started:
            table_buffer.append(line)
        else:
            new_lines.append(line)
    new_text = '\n'.join(new_lines)
    return new_text

def convert_superscript(num):
    str_ = ''
    if num > 99:
        mod = num//100
        str_ = SUP[mod]
        num  = num%100
    if num > 9:
        mod = num//10
        str_ += SUP[mod]
        num  = num%10
    str_ += SUP[num]
    return str_


class HTML2Text(html.parser.HTMLParser):
    def __init__(self, columns):
        super().__init__(convert_charrefs=True)

        self.columns = columns
        # Config options
        self.split_next_td = False
        self.td_count = 0
        self.table_start = False
        self.ul_item_mark = '-'  # covered in cli
        self.emphasis_mark_start = '\N{INVISIBLE SEPARATOR}' #\u2063
        self.emphasis_mark_end = '\N{INVISIBLE SEPARATOR}'*2 #\u2063
        self.strong_mark_start = '\N{INVISIBLE SEPARATOR}' #\u2063
        self.strong_mark_end = '\N{INVISIBLE SEPARATOR}'*3 #\u2063
        self.underline_mark_start = '\033[4m'
        self.underline_mark_end = '\033[0m'
        self.link_begin_mark = '\N{INVISIBLE SEPARATOR}' #\u2063
        self.link_end_mark = '\N{INVISIBLE SEPARATOR}' #
        self.image_placeholder_char = '\N{SHAMROCK}' #\u2618

        # empty list to store output characters before they are "joined"
        self.outtextlist = []

        self.quiet = 0
        self.p_p = 0  # number of newline character to print before next output
        self.outcount = 0
        self.start = 1
        self.space = 0
        self.a = []
        self.astack = []
        self.maybe_automatic_link = None
        self.div_was_inline = False
        self.empty_link = False
        self.acount = 0
        self.list = []
        self.blockquote = 0
        self.pre = 0
        self.startpre = 0
        self.code = False
        self.br_toggle = ''
        self.lastWasNL = 0
        self.lastWasList = False
        self.style = 0
        self.style_def = {}
        self.tag_stack = []
        self.emphasis = 0
        self.drop_white_space = 0
        self.inheader = False
        self.abbr_title = None  # current abbreviation definition
        self.abbr_data = None  # last inner HTML (for abbr being defined)
        self.abbr_list = {}  # stack of abbreviations to write later
        self.stressed = False
        self.preceding_stressed = False
        self.preceding_data = None
        self.current_tag = None

    def feed(self, data):
        data = data.replace("</' + 'script>", "</ignore>")
        super().feed(data)

    def handle(self, data):
        self.feed(data)
        self.feed("")
        outtext = self.close()

        # compress multiple spaces into one
        outtext = RE_MULTIPLE_BLANKS.sub('\g<FORMATTING> ', outtext)
        # pad tables after having cleaned up the string
        outtext = pad_tables_in_text(outtext, columns=self.columns)
        # remove trailing spaces
        outtext = RE_TRAILING_SPACES.sub('', outtext)
        # reduce >2 empty lines to only one empty line
        outtext = RE_MULTIPLE_EMPTY_LINES.sub('\n\n', outtext)
        # do the same for lines with only blockquote char and spaces
        outtext = RE_MULTIPLE_QUOTEEMPTY_LINES.sub('\g<QUOTE>', outtext)

        return outtext

    def out(self, s):
        self.outtextlist.append(s)
        if s:
            self.lastWasNL = s[-1] == '\n'

    def close(self):
        super().close()

        self.pbr()
        self.o('', 0, 'end')

        outtext = ''.join(self.outtextlist)

        # Clear self.outtextlist to avoid memory leak of its content to
        # the next handling.
        self.outtextlist = []

        return outtext

    def handle_starttag(self, tag, attrs):
        self.handle_tag(tag, attrs, 1)

    def handle_endtag(self, tag):
        self.handle_tag(tag, None, 0)

    def previous_index(self, attrs):
        """
        :type attrs: dict

        :returns: The index of certain set of attributes (of a link) in the
        self.a list. If the set of attributes is not found, returns None
        :rtype: int
        """
        if 'href' not in attrs:  # pragma: no cover
            return None
        i = -1
        for a in self.a:
            i += 1
            match = 0

            if 'href' in a and a['href'] == attrs['href']:
                if 'title' in a or 'title' in attrs:
                    if 'title' in a and \
                        'title' in attrs and \
                            a['title'] == attrs['title']:
                        match = True
                else:
                    match = True

            if match:
                return i


    def handle_emphasis(self, start, tag_style, parent_style):
        """
        Handles various text emphases
        """
        tag_emphasis = google_text_emphasis(tag_style)
        parent_emphasis = google_text_emphasis(parent_style)

        # google and others may mark a font's weight as `bold` or `700`
        bold = False
        for bold_marker in BOLD_TEXT_STYLE_VALUES:
            bold = (bold_marker in tag_emphasis
                    and bold_marker not in parent_emphasis)
            if bold:
                break

        italic = 'italic' in tag_emphasis and 'italic' not in parent_emphasis
        fixed = google_fixed_width_font(tag_style) and not \
            google_fixed_width_font(parent_style) and not self.pre

        if start:
            # crossed-out text must be handled before other attributes
            # in order not to output qualifiers unnecessarily
            if bold or italic or fixed:
                self.emphasis += 1
            if italic:
                self.o(self.emphasis_mark_start)
                self.drop_white_space += 1
            if bold:
                self.o(self.strong_mark_start)
                self.drop_white_space += 1
            if fixed:
                self.o('`')
                self.drop_white_space += 1
                self.code = True
        else:
            if bold or italic or fixed:
                # there must not be whitespace before closing emphasis mark
                self.emphasis -= 1
                self.space = 0
            if fixed:
                if self.drop_white_space:
                    # empty emphasis, drop it
                    self.drop_white_space -= 1
                else:
                    self.o('`')
                self.code = False
            if bold:
                if self.drop_white_space:
                    # empty emphasis, drop it
                    self.drop_white_space -= 1
                else:
                    self.o(self.strong_mark_end)
            if italic:
                if self.drop_white_space:
                    # empty emphasis, drop it
                    self.drop_white_space -= 1
                else:
                    self.o(self.emphasis_mark_end)
            # space is only allowed after *all* emphasis marks
            if (bold or italic) and not self.emphasis:
                self.o(" ")

    def handle_tag(self, tag, attrs, start):
        self.current_tag = tag
        # attrs is None for endtags
        if attrs is None:
            attrs = {}
        else:
            attrs = dict(attrs)

        # first thing inside the anchor tag is another tag
        # that produces some output
        if (start and self.maybe_automatic_link is not None and
                tag not in ['p', 'div', 'style', 'dl', 'dt'] and
                (tag != "img")):
            #self.o("[")
            self.o(self.link_begin_mark)
            self.maybe_automatic_link = None
            self.empty_link = False

        if hn(tag):
            self.p()
            if start:
                self.inheader = True
                self.o(hn(tag) * "#" + ' ')
            else:
                self.inheader = False
                return  # prevent redundant emphasis marks on headers

        if tag in ['p', 'div']:
            if start and tag == 'div' and 'style' in attrs \
               and 'display:inline' in attrs['style']:
                self.div_was_inline = True
            elif self.astack and tag == 'div':
                pass
            elif tag == 'div' and self.div_was_inline and not start:
                self.div_was_inline = False
            else:
                self.p(tag)

        if tag == "br" and start:
            quotechars = '>'*self.blockquote
            self.o("\n"+quotechars)

        if tag == "hr" and start:
            self.p()
            columns = self.columns or 10
            self.o("–"*columns)
            self.p()

        if tag in ["head", "style", 'script']:
            if start:
                self.quiet += 1
            else:
                self.quiet -= 1

        if tag == "style":
            if start:
                self.style += 1
            else:
                self.style -= 1

        if tag in ["body"]:
            self.quiet = 0  # sites like 9rules.com never close <head>

        if tag == "blockquote":
            if start:
                self.p()
                self.o('>', 0, 1)
                self.start = 1
                self.blockquote += 1
            else:
                self.blockquote -= 1
                self.p()

        if tag in ['em', 'i']:
            if start:
                self.o(self.emphasis_mark_start)
                self.stressed = True
            else:
                self.o(self.emphasis_mark_end)

        if tag in ['u']:
            if start:
               self.o(self.underline_mark_start)
               self.stressed = True
            else:
                self.o(self.underline_mark_end)

        if tag in ['strong', 'b']:
            if start:
               self.o(self.strong_mark_start)
               self.stressed = True
            else:
                self.o(self.strong_mark_end)

        if tag in ['del', 'strike', 's']:
            strike = '~~'

            self.o(strike)
            if start:
                self.stressed = True

        if tag in ["code", "tt"] and not self.pre:
            self.o('`')  # TODO: `` `this` ``
            self.code = not self.code

        if tag == "abbr":
            if start:
                self.abbr_title = None
                self.abbr_data = ''
                if ('title' in attrs):
                    self.abbr_title = attrs['title']
            else:
                if self.abbr_title is not None:
                    self.abbr_list[self.abbr_data] = self.abbr_title
                    self.abbr_title = None
                self.abbr_data = ''


        if tag == "a":
            if start:
                if 'href' in attrs and \
                    attrs['href'] is not None and not attrs['href'].startswith('#'):
                    self.astack.append(attrs)
                    self.maybe_automatic_link = attrs['href']
                    self.empty_link = True
                else:
                    self.astack.append(None)
            else:
                if self.astack:
                    a = self.astack.pop()
                    if self.maybe_automatic_link and not self.empty_link:
                        self.maybe_automatic_link = None
                    elif a:
                        if self.empty_link:
                            #self.o("[")
                            self.o(self.link_begin_mark)
                            self.empty_link = False
                            self.maybe_automatic_link = None
                        else:
                            i = self.previous_index(a)
                            if i is not None:
                                a = self.a[i]
                            else:
                                self.acount += 1
                                a['count'] = self.acount
                                a['outcount'] = self.outcount
                                self.a.append(a)
                            self.o(self.link_end_mark + convert_superscript(a['count']))

        if tag == "img" and start:
            if 'src' in attrs:
                alt = attrs.get('alt') or ''
                self.o(self.image_placeholder_char + alt )

        if tag == 'dl' and start:
            self.p()
        if tag == 'dt' and not start:
            self.pbr()
        if tag == 'dd' and start:
            self.o('    ')
        if tag == 'dd' and not start:
            self.pbr()

        if tag in ["ol", "ul"]:
            # Google Docs create sub lists as top level lists
            if (not self.list) and (not self.lastWasList):
                self.p()
            if start:
                list_style = tag
                numbering_start = list_numbering_start(attrs)
                self.list.append({
                    'name': list_style,
                    'num': numbering_start
                })
            else:
                if self.list:
                    self.list.pop()
                    if not self.list:
                        self.o('\n')
            self.lastWasList = True
        else:
            self.lastWasList = False

        if tag == 'li':
            self.pbr()
            if start:
                if self.list:
                    li = self.list[-1]
                else:
                    li = {'name': 'ul', 'num': 0}
                nest_count = len(self.list)
                # TODO: line up <ol><li>s > 9 correctly.
                self.o("  " * nest_count)
                if li['name'] == "ul":
                    self.o(self.ul_item_mark + " ")
                elif li['name'] == "ol":
                    li['num'] += 1
                    self.o(str(li['num']) + ". ")
                self.start = 1

        if tag in ["table", "tr", "td", "th"]:
            if tag == "table":
                if start:
                    self.table_start = True
                    self.o("<" + TABLE_MARKER_FOR_PAD + ">")
                    self.o("  \n")
                else:
                    self.o("</" + TABLE_MARKER_FOR_PAD + ">")
                    self.o("  \n")
            if tag in ["td", "th"] and start:
                if self.split_next_td:
                    self.o("│ ")
                self.split_next_td = True

            if tag == "tr" and start:
                self.td_count = 0
            if tag == "tr" and not start:
                self.split_next_td = False
                self.soft_br()
            if tag == "tr" and not start and self.table_start:
                # Underline table header
                self.o("│".join(["───"] * self.td_count))
                self.soft_br()
                self.table_start = False
            if tag in ["td", "th"] and start:
                self.td_count += 1

        if tag == "pre":
            if start:
                self.startpre = 1
                self.pre = 1
            else:
                self.pre = 0
            self.p()

    def pbr(self):
        "Pretty print has a line break"
        if self.p_p == 0:
            self.p_p = 1

    def p(self, tag='p'):
        "Set pretty print to 1 or 2 lines"
        if tag == 'div':
            self.p_p = 1
        else:
            self.p_p = 2

    def soft_br(self):
        "Soft breaks"
        self.pbr()
        self.br_toggle = '  '

    def o(self, data, puredata=0, force=0):
        """
        Deal with indentation and whitespace
        """
        if self.abbr_data is not None:
            self.abbr_data += data

        if not self.quiet:
            if puredata and not self.pre:
                data = RE_SPACE_GENERAL.sub(' ', data)
                if data and data[0] == ' ':
                    self.space = 1
                    data = data[1:]
            if not data and not force:
                return

            if self.startpre:
                # self.out(" :") #TODO: not output when already one there
                if not data.startswith("\n") and not data.startswith("\r\n"):
                    # <pre>stuff...
                    data = "\n" + data

            bq = (">" * self.blockquote)
            if not (force and data and data[0] == ">") and self.blockquote:
                bq += " "

            if self.pre:
                if not self.list:
                    bq += "    "
                # else: list content is already partially indented
                for i in range(len(self.list)):
                    bq += "    "
                data = data.replace("\n", "\n" + bq)

            if self.startpre:
                self.startpre = 0
                if self.list:
                    # use existing initial indentation
                    data = data.lstrip("\n")

            if self.start:
                self.space = 0
                self.p_p = 0
                self.start = 0

            if force == 'end':
                # It's the end.
                self.p_p = 0
                self.out("\n")
                self.space = 0

            if self.p_p:
                self.out((self.br_toggle + '\n' + bq) * self.p_p)
                self.space = 0
                self.br_toggle = ''

            if self.space:
                if not self.lastWasNL and not self.blockquote:
                    self.out(' ')
                self.space = 0

            if self.a and force == "end":
                if force == "end":
                    self.out("\n")

                newa = []
                self.out('\n\n––––\n\n')
                for link in self.a:
                    # remove mailto protocol links
                    link['href'] = link['href'].replace('mailto:', '')
                    if self.outcount > link['outcount']:
                        self.out(convert_superscript(link['count']) + " " +
                                link['href'])
                        if ('title' in link) and (link['title'] is not None):
                            self.out(" (" + link['title'] + ")")
                        self.out("\n")
                    else:
                        newa.append(link)

                # Don't need an extra line when nothing was done.
                if self.a != newa:
                    self.out("\n")

                self.a = newa

            if self.abbr_list and force == "end":
                for abbr, definition in self.abbr_list.items():
                    self.out("  *[" + abbr + "]: " + definition + "\n")

            self.p_p = 0
            self.out(data)
            self.outcount += 1

    def handle_data(self, data, entity_char=False):
        if self.stressed:
            #data = data.strip(' ')
            self.stressed = False
            self.preceding_stressed = True
        elif (self.preceding_stressed
              and RE_NON_PUNCT.match(data[0])
              and not hn(self.current_tag)
              and self.current_tag not in ['a', 'code', 'pre']):
            # should match a letter or common punctuation
            data = ' ' + data
            self.preceding_stressed = False

        if self.style:
            self.style_def.update(dumb_css_parser(data))

        if self.maybe_automatic_link is not None:
            href = self.maybe_automatic_link
            # massage href to remove mailto links
            href = href.replace('mailto:', '')
            # if href is a telephone number
            if href.startswith('tel:'):
                href = data
            # data sometimes still contains spaces
            datacmp = data.strip()
            # href is equivalent to data if they only differ for a final '/'
            # check also if data is only missing the http/s part
            conditions = (href == datacmp,
                          href[7:] == datacmp,
                          href[8:] == datacmp,
                          href[:-1] == datacmp and href[-1] == '/',
                          href == datacmp[:-1] and datacmp[-1] == '/',
                          )
            if any(conditions):
                self.o(data)
                self.empty_link = False
                return
            else:
                #self.o("[")
                self.o(self.link_begin_mark)
                self.maybe_automatic_link = None
                self.empty_link = False

        self.preceding_data = data
        self.o(data, 1)


def main():
    p = argparse.ArgumentParser(
        description=__doc__)
    p.add_argument(
        "file",
        nargs='?',
        default=None,
        help="input file (read from stdin if not specified)")
    p.add_argument(
        "-c", "--columns",
        dest="columns",
        action="store",
        type=int,
        default=0,
        help="columns")
    p.add_argument(
        "-e", "--encoding",
        dest="encoding",
        action="store",
        default="utf-8",
        help="input encoding")
    p.add_argument(
        "-d", "--decode-errors",
        dest="decode_errors",
        action="store",
        default="strict",
        help="What to do in case of decode errors.'ignore', 'strict' and "
             "'replace' are acceptable values")
    options = p.parse_args()

    encoding = options.encoding

    # just be safe and assume ascii is meant to be utf-8
    if encoding == 'us-ascii':
        encoding = 'utf-8'

    # read input as binary strings
    if not options.file:
        data = sys.stdin.buffer.read()
    else:
        data = open(options.file, 'rb').read()

    # try to decode the binary string with the declared charset
    try:
        data = data.decode(encoding=encoding, errors=options.decode_errors)
        # if we have no exception, then the declared encoding was correct
        have_to_guess = False
    except UnicodeDecodeError as err:
        # the headers lied: let us try to detect the charset automatically
        have_to_guess = True

    if have_to_guess:
        encoding = chardet.detect(data)['encoding']
        try:
            data = data.decode(encoding=encoding, errors=options.decode_errors)
        except UnicodeDecodeError as err:
            sys.stderr.write('Decoding error! Use --decode-errors=ignore!')
            raise err

    # handle columns
    if not options.columns:
        # try to read columns from enviroment
        try:
            columns = int(os.environ['COLUMNS'])-1
        except KeyError:
            columns = 79
    else:
        columns = int(options.columns) -1

    # remove tags that we can't parse properly beforehand
    # word break opportunity tag
    data = data.replace('<wbr>', '')
    data = data.replace('<wbr class="">', '')
    # zero-width space
    data = data.replace('\u200b', '')

    h = HTML2Text(options.columns)
    sys.stdout.buffer.write(h.handle(data).encode('utf-8'))

if __name__ == "__main__":
    main()
